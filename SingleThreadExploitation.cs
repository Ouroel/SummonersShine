using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Terraria;
using Terraria.ModLoader;

namespace SummonersShine
{
    public static class SingleThreadExploitation
    {
        public static Player storedPlayerVel;
        public static Vector2 playerStoredVel;
        public static Vector2 playerNewVel;

        public static int[] doubleUpdatedProjectiles;
        public static int doubleUpdatedProjectilesSize = 0;
        public static bool doingDoubleUpdate = false;

        public static int impTarget = -2;
        public static int projectileBuffCountIntDetector = 0;


        public static bool flinx_justTileCollided = false;
        public static Vector2 flinxOldVel = Vector2.Zero;

        public static float houndiusStoredVelX = 0;
        internal static int PlayerRocketDelay;

        public static bool minionFlickerFixStored = false;
        public static int minionFlickeringFix = 0;
        internal static Vector2 Terraprisma_Dist_Fix_StoredVector = Vector2.Zero;
        internal static bool IsSpammingQueenSpiderExplosion = false;
        internal static double originalDayRate;
        internal static double originalRate;
        internal static bool acceleratingTime;
        internal static bool TerminatingSpecialAbility;

        public static bool Reforging = false;

        public static void SetReforgingTrue()
        {
            Reforging = true;
        }
        public static void SetReforgingFalse()
        {
            Reforging = false;
        }
        public static void ComparativelySlowPlayer(Player player, float lastSimRate) {
            UncomparativelySlowPlayer();
            playerStoredVel = player.velocity;
            storedPlayerVel = player;
            player.velocity /= lastSimRate;
            playerNewVel = player.velocity;
        }

        public static void UncomparativelySlowPlayer() {
            if (storedPlayerVel != null)
            {
                if (playerNewVel == storedPlayerVel.velocity)
                    storedPlayerVel.velocity = playerStoredVel;
                storedPlayerVel = null;
                playerStoredVel = Vector2.Zero;
                playerNewVel = Vector2.Zero;
            }
        }

        public class SingleThreadExploitation_Loader : ILoadable
		{
			public void Load(Mod mod)
			{
				storedPlayerVel = null;
                playerStoredVel = default(Vector2);
                playerNewVel = default(Vector2);

                doubleUpdatedProjectiles = new int[Main.maxProjectiles];
                doubleUpdatedProjectilesSize = 0;
            }

			public void Unload()
			{
				storedPlayerVel = null;
                playerStoredVel = default(Vector2);
                playerNewVel = default(Vector2);

                doubleUpdatedProjectiles = null;
                doubleUpdatedProjectilesSize = 0;
            }
        }
    }
}
